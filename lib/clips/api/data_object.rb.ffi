
module Clips
  module Api
    class DataObject < FFI::Struct
      class << self
        def type_str(type)
          constant = constants.find {|const| const_get(const) == type }
          constant ? constant.to_s : nil
        end
      end
      
      # see constant.h
      FLOAT            = 0
      INTEGER          = 1
      SYMBOL           = 2
      STRING           = 3
      MULTIFIELD       = 4
      EXTERNAL_ADDRESS = 5
      FACT_ADDRESS     = 6
      INSTANCE_ADDRESS = 7
      INSTANCE_NAME    = 8
      
      CAST = {
        FLOAT => Struct::FloatHashNode,
        INTEGER => Struct::IntegerHashNode,
        SYMBOL => Struct::SymbolHashNode,
        STRING => Struct::SymbolHashNode,
        EXTERNAL_ADDRESS => Struct::ExternalAddressHashNode
      }
      
      @@@
      struct do |s|
        s.name 'struct dataObject'
        s.include 'clips.h'
        
        s.field :supplementalInfo, :pointer
        s.field :type,  :ushort
        s.field :value, :pointer
        s.field :begin, :long
        s.field :end,   :long
        s.field :next,  :pointer
      end
      @@@
      
      def initialize(attrs=nil)
        super()
        
        attrs.each_pair do |key, value|
          self[key] = value
        end if attrs
      end
      
      def type
        DataObject.type_str(self[:type])
      end
      
      def value
        struct = CAST[self[:type]]
        raise "cannot cast type: #{self[:type]} (#{type})" unless struct
        struct.new(self[:value])[:contents]
      end
    end
  end
end