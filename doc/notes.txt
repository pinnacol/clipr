== Efficiency (p78/88)

 1. Put the most specific patterns in a rule first. Patterns with unbound
variables and wildcards should be lower down in the list of rule patterns. A
control fact should be put first in the patterns.

2. Patterns with fewer matching facts should go first to minimize partial
matches.

3. Patterns that are often retracted and asserted, volatile patterns, should
be put last in the list of patterns.

== Facts

modify    (like a merge!)
duplicate (like a merge)

$ ~ * (splat)  # 5.4.1.3 Variables Single- and Multifield 

== Inheritance

COOL supports multiple inheritance: a class may directly inherit slots and
message-handlers from more than one class. Since inheritance is only useful
for slots and message-handlers, it is often not meaningful to inherit from one
of the primitive type classes, such as MULTIFIELD or NUMBER. This is because
these classes cannot have slots and usually do not have message-handlers.

== Rules

Patterns: & | ~ : = (connective constraints: and or not predicate return)
OOP patterns: is-a 

Negation: not
Grouping: and, or, exists
Callback: test
Special: forall, logical

=== Signatures

not CE
and CE+
or CE+
exists  CE+
test FCN
forall CE CE+
logical CE+

== A General Pattern

This is a general rule pattern that delegates fully to ruby.

  (defrule name
    ?fact <- (template (slot ?value&:(call block ?value)))
    =>
    (call block ?fact))

It may be fast enough, but more likely this is a fairly slow way of pattern
matching because of the many variable assignments and the callbacks to ruby.
However, it's a good place to start and then optimizations can be built onto
this basic scaffold for matching patterns with primitive types and performing
standard LHS operations.

The syntax is:

  match(template, :a, :b, :c) {|a, b, c| ... }

=== Experiments

In this setup it may be best to actively compile each method call as it goes
along. That would allow proper nesting. It's a builder model.

env.rule do
  # lhs/rhs methods instance_eval block or return self

  lhs.match(:template, :key => 'value')
  lhs.all do 
    match(:template, :key => 'value')
  end
  rhs.call { ... }

  # variation
  
  lhs do # implicit all
    match(:template, :key => 'value')
  end
  
  rhs do 
    call { ... }
    call { ... }
    call { ... }
    # standard patterns can be assigned here too...
  end
end

env.rule do
  # Match is a confluence of pattern matching and test.
  #
  # * Leading values pick up variable assignments (reordered to end)
  # * Primitive types are used directly
  #   (symbol.to_s will need to be scrubbed to ensure a legal symbol results)
  # * Object types are compared using a predicate ruby compare
  # * Block is a test that receives assignments (ruby-call converts ?values to objects)
  #
  # (template
  #   (sym value)
  #   (str "value")
  #   (int 1)
  #   (float 1.2)
  #   (obj ?object_id&:(ruby-equal object_id ?object_id))
  #   (a ?a)
  #   (b ?b)
  #   (c ?c))
  # (test (ruby-call block ?a ?b ?c))
  #
  match(template, :a, :b, :c
    :sym => :value,
    :str => 'value', 
    :int => 1, 
    :float => 1.2, 
    :obj => Object.new
  ) do |a,b,c|
    ... true/false
  end
  
  # In a variation, a nil + block configures each slot individually.
  #
  # (template ... )
  match(template) do
    # (key a)
    slot key, [:a]
  
    # (key a|"a"|1|1.2)
    slot key, [:a, 'a', 1, 1.2]
  
    # (key ~c&~d)
    slot key, [], [:c, :d]
  
    # (key ?object_id&:(ruby-equal a_id ?object_id))&~:(ruby-equal b_id ?object_id))
    slot key, [A.new], [B.new]
    
    # (template (key ?object_id&:(ruby-call block object_id))
    slot key {|value| ... }

    # (template (key ?object_id&a&~c&:(...)|b&~c&:(...)))
    #
    # Mixing is nasty because of precedence rules --- cross product results
    slot key, [:a, :b], [:c] {|value| ... }
  end
  
  # assign has similar syntax to a match, but assigns the pattern address.
  # in general variables are local to the match/every block and so to
  # access fact values, the rhs needs to assign the fact and then re-access
  # manually.
  #
  # ?key <- (template
  #   (a ?a)
  #   (b ?b)
  #   (c ?c))
  # (test (ruby-call block ?a ?b ?c))
  #
  assign(:key, template, :a, :b, :c ...) {}
  
  # check creates a test block that can access the pattern addresses, in
  # the order that they have been defined.  call blocks for the rhs
  # similarly receive addresses.
  #
  # (test (ruby-call block ?key))
  check {|key| }
  
  # any one must be true
  # (or (template (key a)) (template (key b)))
  any do 
    match template, :key => 'a'
    match template, :key => 'b'
  end
  
  # all must be true, triggers for each match
  # (and (template (key a)) (template (key b)))
  all do
    match template, :key => 'a'
    match template, :key => 'b'
  end
  
  # all must be true, only triggers once
  exists do
    match a, :student
    match a, :student
    match b, :student
  end
  
  # every uses the same syntax as match, except rather than defining
  # a test, the block is used to define the rest of the statement.
  # Note the variables are not values... they are placeholders
  # indicating the variable to assign from the first statement.
  #
  # (forall
  #   (one (:b ?b) (:c ?c) (key value))
  #   (two (b ?b))
  #   (three (c ?c))
  # )
  every(one, :b, :c, :key => 'value') do |a, b, c|
    match two, :b => b
    match three, :c => c
  end
  
  # Note that not_assign, not_check do not exist.
  # * not_assign will raise an error (<- (not... ))
  # * not_check can be achieved by the block
  not_match   # this is false
  not_any     # all must be false, triggers for each match?
  not_all     # one must be false
  not_exists  # all must be false, only triggers once
  not_every   # 
  
  #
  # General, using CLIPS syntax
  #
  
  ce :match, template, :key => 'value'
  ce :not, template, :key => 'value'
  ce :or do
    ce :match, template, :key => 'a'
    ce :match, template, :key => 'b'
  end
  
  ce :and do 
    ce :match, template, :key => 'a'
    ce :match, template, :key => 'b'
  end
  
  ce :exists, template, :key => 'a'
end

So even thinking about how to define the matcher requires some idea about the
signature of a rule. Templates define the slots for a rule; hashes provide the
values for a rule. Maybe a simple pattern match provides a hash of values that
should be met?

  # (template (key value))
  rhs.match template, {:key => 'value'}

Predicates are handled with callbacks:

  # (template (key ?value&:(...)) )
  rhs.match(template) {|value| ... }

Maybe block style for more complicated matches:

  # (template (key value))
  rhs.match template, {:key => 'value'}
  
  rhs.match template do
    # (template (key a|b)
    slot key, ['a']
    
    # (template (key a|b)
    slot key, ['a', 'b']
    
    # (template (key ~c&~d)
    slot key, [], ['c' ,'d']
    
    # (template (key ?value&:(...))
    slot key {|value| ... }
  
    # (template (key ?value&a&~c&:(...)|b&~c&:(...)))
    # Nasty because of precedence rules --- cross product
    slot key, ['a', 'b'], ['c'] {|value| ... }
    
    slot key, [oks], [not_oks], {predicate}
  end


